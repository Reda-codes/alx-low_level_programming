!<arch>
0-isupper.c/    0           0     0     644     286       `
#include <stdio.h>
#include <ctype.h>
/* betty style doc for function main goes there */
/**
 * _isupper - Checks for uppercase
 * @c: input
 * Return: 1 if letter is uppercase or 0 if not
 */
int _isupper(int c)
{
	if (isupper(c) == 0)
	{
		return (0);
	}
	else
	{
		return (1);
	};
}
0-strcat.c/     0           0     0     644     311       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * *_strcat - function that concatenates two strings.
 * @dest: destination string
 * @src: source string
 * Return: the pointer to dest
 */
char *_strcat(char *dest, char *src)
{
	strcat(dest, src);
	return (dest);
}

1-memcpy.c/     0           0     0     644     383       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _memcpy - function that copies memory area.
 * @dest: memory adress of array
 * @src: memory address of source to copy from
 * @n: number of bytes to be filled
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	memcpy(dest, src, n);
	return (dest);
}

100-atoi.c/     0           0     0     644     160       `
#include "main.h"

/**
 * _atoi - fubction taht convert a string to an integer.
 * @s: string input
 * Return: integer
 */

int _atoi(char *s)
{
	return (0);
}
2-strlen.c/     0           0     0     644     269       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _strlen - function that returns the length of a string
 * @s: input string
 * Return:  the length of a string
 */
int _strlen(char *s)
{
	int z = strlen(s);

	return (z);
}

3-islower.c/    0           0     0     644     286       `
#include <stdio.h>
#include <ctype.h>
/* betty style doc for function main goes there */
/**
 * _islower - Checks for lowercase
 * @c: input
 * Return: 1 if letter is lowercase or 0 if not
 */
int _islower(int c)
{
	if (islower(c) == 0)
	{
		return (0);
	}
	else
	{
		return (1);
	};
}
3-strcmp.c/     0           0     0     644     403       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _strcmp -  function that compares two strings.
 * @s1: string one
 * @s2: string two
 * Return: strcmp function result
 */
int _strcmp(char *s1, char *s2)
{
	int z = 0;
	int i = 0;

	while (s1[i])
	{
		if (s1[i] != s2[i])
		{
			z = ((s1[i] - '\0') - (s2[i] - '\0'));
			break;
		}
		i++;
	}
	return (z);
}

4-isalpha.c/    0           0     0     644     278       `
#include <stdio.h>
#include <ctype.h>
/* betty style doc for function main goes there */
/**
 * _isalpha  - Checks for alphabet
 * @c: input
 * Return: 1 if alphabet or 0 if not
 */
int _isalpha(int c)

	{
	if (isalpha(c) == 0)
	{
		return (0);
	}
	else
	{
		return (1);
	};
}

5-strstr.c/     0           0     0     644     409       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _strstr - unction that locates a substring.
 * @haystack: the string to search in
 * @needle:  substring to search for
 * Return: a pointer to the beginning of the located substring,
 * or NULL if the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
	return (strstr(haystack, needle));
}

9-strcpy.c/     0           0     0     644     415       `
#include "main.h"
#include <stdio.h>
#include <string.h>
/* betty style doc for function main goes there */
/**
 * *_strcpy - function that copies the string pointed to by src,
 * including the terminating null byte (\0),
 * to the buffer pointed to by dest.
 * @dest: the buffer
 * @src: string
 * Return: value: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	strcpy(dest, src);
	return (dest);
}

_putchar.c/     0           0     0     644     254       `
#include <unistd.h>

/* betty style doc for function main goes there */
/**
 * _putchar - writes the character c to stdout
 * @c: input character to print
 *
 * Return: 1if success or -1 if errore.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
0-memset.c/     0           0     0     644     372       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _memset - function that fills memory with a constant byte.
 * @s: memory adress of  array
 * @b: the constant byte
 * @n: number of bytes to be filled
 * Return: the memory adress of  array
 */
char *_memset(char *s, char b, unsigned int n)
{
	memset(s, b, n);
	return (s);
}
1-isdigit.c/    0           0     0     644     289       `
#include <stdio.h>
#include <ctype.h>
/* betty style doc for function main goes there */
/**
 * _isdigit - Checks if input is a digit
 * @c: input
 * Return: 1 if input is a digit or 0 if not
 */
int _isdigit(int c)
{
	if (isdigit(c) == 0)
	{
		return (0);
	}
	else
	{
		return (1);
	};
}

1-strncat.c/    0           0     0     644     383       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _memcpy - function that copies memory area.
 * @dest: memory adress of array
 * @src: memory address of source to copy from
 * @n: number of bytes to be filled
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	memcpy(dest, src, n);
	return (dest);
}

2-strchr.c/     0           0     0     644     421       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _strchr - function that locates a character in a string.
 * @s: the string to be scanned.
 * @c: This is the character to be searched in str.
 * Return: pointer to the first occurrence of the character c in the
 * string s, or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	return (strchr(s, c));
}

2-strncpy.c/    0           0     0     644     355       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * *_strncpy -  function that copies a string.
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to use from src
 * Return: the pointer to dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	strncpy(dest, src, n);
	return (dest);
}

3-puts.c/       0           0     0     644     249       `
#include "main.h"
#include <stdio.h>
/* betty style doc for function main goes there */
/**
 * _puts - function that prints a string, followed by a new line, to stdout.
 * @str: input string
 * Return: void
 */
void _puts(char *str)
{
	puts(str);
}

3-strspn.c/     0           0     0     644     389       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _strspn - function that gets the length of a prefix substring.
 * @s: initial segment
 * @accept: input bytes
 * Return: the number of bytes in the initial segment of s
 * which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	return (strspn(s, accept));
}

4-strpbrk.c/    0           0     0     644     404       `
#include "main.h"
#include <string.h>
/* betty style doc for function main goes there */
/**
 * _strpbrk - function that searches a string for any of a set of bytes.
 * @s: initial segment
 * @accept: input bytes
 * Return: a pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	return (strpbrk(s, accept));
}
6-abs.c/        0           0     0     644     259       `
#include <stdio.h>
#include <stdlib.h>
/* betty style doc for function main goes there */
/**
 * _abs - Prints the absolute value of an integer.
 * @n: input
 * Return: return program's execution status
 */
int _abs(int n)
{
	int v =  abs(n);

	return (v);
}

